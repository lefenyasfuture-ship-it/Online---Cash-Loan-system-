cd EdCash
mkdir backend
cd backend
npm init -y

npm install express sqlite3 dotenv cors helmet express-rate-limit joi bcrypt jsonwebtoken dayjs uuid
npm install --save-dev nodemon

"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js",
  "init-db": "node server.js --init"
}

PORT=8080
JWT_SECRET=supersecretkey
DB_PATH=./data/edcash.sqlite

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import dayjs from 'dayjs';

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 8080;
const JWT_SECRET = process.env.JWT_SECRET || 'secret';
let db;

async function getDb() {
  if (!db) {
    db = await open({ filename: process.env.DB_PATH, driver: sqlite3.Database });
    await db.exec('PRAGMA foreign_keys = ON');
  }
  return db;
}

// Initialize DB tables
async function initDB() {
  const d = await getDb();
  await d.exec(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT,
      email TEXT UNIQUE,
      password_hash TEXT
    );
    CREATE TABLE IF NOT EXISTS borrowers (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      first_name TEXT,
      last_name TEXT,
      phone TEXT,
      email TEXT
    );
    CREATE TABLE IF NOT EXISTS loans (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      borrower_id INTEGER,
      principal REAL,
      status TEXT,
      created_at TEXT,
      FOREIGN KEY(borrower_id) REFERENCES borrowers(id)
    );
    CREATE TABLE IF NOT EXISTS repayments (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      loan_id INTEGER,
      amount REAL,
      paid_at TEXT,
      FOREIGN KEY(loan_id) REFERENCES loans(id)
    );
  `);
  console.log('Database initialized');
}

if (process.argv.includes('--init')) initDB();

// Routes
app.post('/api/register', async (req, res) => {
  const { name, email, password } = req.body;
  const hashed = await bcrypt.hash(password, 10);
  const d = await getDb();
  await d.run(`INSERT INTO users(name,email,password_hash) VALUES(?,?,?)`, [name,email,hashed]);
  res.json({ message: 'User registered' });
});

app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  const d = await getDb();
  const user = await d.get(`SELECT * FROM users WHERE email=?`, [email]);
  if (!user) return res.status(401).json({ error: 'Invalid credentials' });
  const match = await bcrypt.compare(password, user.password_hash);
  if (!match) return res.status(401).json({ error: 'Invalid credentials' });
  const token = jwt.sign({ id: user.id, name: user.name }, JWT_SECRET, { expiresIn: '8h' });
  res.json({ token });
});

// Borrowers
app.post('/api/borrowers', async (req, res) => {
  const { first_name, last_name, phone, email } = req.body;
  const d = await getDb();
  const r = await d.run(`INSERT INTO borrowers(first_name,last_name,phone,email) VALUES(?,?,?,?)`,
    [first_name,last_name,phone,email]);
  res.json({ id: r.lastID });
});

app.get('/api/borrowers', async (req,res)=>{
  const d = await getDb();
  const rows = await d.all(`SELECT * FROM borrowers`);
  res.json(rows);
});

// Loans
app.post('/api/loans', async (req,res)=>{
  const { borrower_id, principal } = req.body;
  const d = await getDb();
  const r = await d.run(`INSERT INTO loans(borrower_id,principal,status,created_at) VALUES(?,?,?,?)`,
    [borrower_id,principal,'active',dayjs().format()]);
  res.json({ id: r.lastID });
});

app.get('/api/loans', async (req,res)=>{
  const d = await getDb();
  const rows = await d.all(`SELECT * FROM loans`);
  res.json(rows);
});

// Repayments
app.post('/api/repayments', async (req,res)=>{
  const { loan_id, amount } = req.body;
  const d = await getDb();
  await d.run(`INSERT INTO repayments(loan_id,amount,paid_at) VALUES(?,?,?)`,
    [loan_id,amount,dayjs().format()]);
  res.json({ message: 'Repayment recorded' });
});

app.get('/api/repayments/:loan_id', async (req,res)=>{
  const d = await getDb();
  const rows = await d.all(`SELECT * FROM repayments WHERE loan_id=?`, [req.params.loan_id]);
  res.json(rows);
});

app.listen(PORT, ()=>console.log(`Backend running on http://localhost:${PORT}`));

cd ..
npx create-react-app frontend
cd frontend
npm install gh-pages

{
  "name": "edcash-frontend",
  "version": "1.0.0",
  "private": true,
  "homepage": "https://lefenyasfuture-ship-it.github.io/Cash-Loan-system/",
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
  "devDependencies": {
    "gh-pages": "^5.0.0"
  }
}

const BASE_URL = 'http://localhost:8080/api'; // update with backend URL when live

export async function login(email, password){
  const res = await fetch(`${BASE_URL}/login`,{
    method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({email,password})
  });
  return res.json();
}

export async function getBorrowers(){
  const res = await fetch(`${BASE_URL}/borrowers`);
  return res.json();
}

export async function createLoan(borrower_id, principal){
  const res = await fetch(`${BASE_URL}/loans`,{
    method:'POST', headers:{'Content-Type':'application/json'},
    body: JSON.stringify({borrower_id,principal})
  });
  return res.json();
}

export async function repayLoan(loan_id, amount){
  const res = await fetch(`${BASE_URL}/repayments`,{
    method:'POST', headers:{'Content-Type':'application/json'},
    body: JSON.stringify({loan_id,amount})
  });
  return res.json();
}

<html>
  <head>
    <meta http-equiv="refresh" content="0; url=./index.html" />
  </head>
  <body>
    <p>If you are not redirected, <a href="./index.html">click here</a>.</p>
  </body>
</html>

cd backend
npm install
npm run init-db       # Initialize database
npm run dev            # Start backend server

cd frontend
npm install
npm start              # Opens http://localhost:3000

cd frontend
npm run deploy
